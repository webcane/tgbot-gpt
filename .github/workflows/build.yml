name: Build and Push to ECR
on:
  push:
    branches:
      - master
      - github-build-ecr
  pull_request:
    branches:
      - master
  workflow_dispatch: # Позволяет запускать workflow вручную из UI GitHub Actions
env:
  APP_NAME: ${{ github.event.repository.name }}
  AWS_REGION: ${{vars.AWS_REGION}}
  AWS_ACCOUNT_ID: ${{vars.AWS_ACCOUNT_ID}}
jobs:
  build-and-push:
    runs-on: ubuntu-22.04
    environment: aws
    env:
      JAVA_VERSION: '21'
    permissions:
      id-token: write # Это абсолютно необходимо для OIDC!
      contents: read  # access to check out code and install dependencies
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dump github context
        run: echo "$GITHUB_CONTEXT"
        shell: bash
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Set up JDK ${{env.JAVA_VERSION}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{env.JAVA_VERSION}}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew # Делаем gradlew исполняемым

      - name: Download dependencies by Gradle
        run: ./gradlew dependencies --no-daemon # for caching

      - name: Build Layered Spring Boot app with Gradle
        run: ./gradlew bootJar --no-daemon # Собираем слоеный JAR

      - name: Configure AWS credentials (using OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Здесь указывается ARN IAM роли, которую GitHub Actions будет пытаться принять
          # Используйте ARN, который вы получили из `terraform output github_actions_iam_role_arn`
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.APP_NAME }}-github-actions-ecr-role
          aws-region: ${{ env.AWS_REGION }}
          # Дополнительно: можно указать duration-seconds, role-session-name и т.д.
          role-session-name: GitHubActionsSession # Опционально, для лучшего логирования в CloudTrail

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2 # Авторизуемся в ECR
        # Output этого шага содержит токен и ECR URI

      - name: Build and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # Получаем URI реестра из предыдущего шага
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ substring(github.sha, 0, 7) }}
          # full image name format: registry_id.dkr.ecr.region.amazonaws.com/repository_name:tag
          IMAGE_URI: "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
        run: |
          echo $IMAGE_URI
          docker build \
            --build-arg JAR_FILE_NAME=${{ env.ECR_REPOSITORY }}.jar \
            -t $IMAGE_URI \
            -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest \
            .      
          docker push $IMAGE_URI
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Verify Docker Image on ECR (Optional)
        run: |
          echo ${{ env.IMAGE_TAG }}
          aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG