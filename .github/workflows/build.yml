name: Build and Push to ECR
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  # Allows manually triggering the workflow from GitHub Actions UI
  workflow_dispatch:
env:
  ECR_REPOSITORY: ${{ github.event.repository.name }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
jobs:
  build-and-push:
    runs-on: ubuntu-22.04
    environment: aws
    env:
      JAVA_VERSION: '21'
    permissions:
      id-token: write # This is absolutely necessary for OIDC!
      contents: read  # Access to check out code and install dependencies
    steps:

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Get Short SHA
        id: get_short_sha
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Dump github context
        run: echo "$GITHUB_CONTEXT"
        shell: bash
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Configure AWS credentials (using OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          # Specify the ARN of the IAM role that GitHub Actions will attempt to assume
          # Use the ARN you obtained from `terraform output github_actions_to_ecr_role_arn`
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.ECR_REPOSITORY }}-github-actions-ecr-role
          aws-region: ${{ env.AWS_REGION }}
          # Optionally: you can specify role-duration-seconds, role-session-name, etc.
          # Optional, for better logging in CloudTrail
          role-session-name: GitHubActionsSession

      - name: Login to Amazon ECR
        id: login-ecr
        # Authenticate with ECR
        uses: aws-actions/amazon-ecr-login@v2
        # The output of this step contains the token and ECR URI

      - name: Build and push Docker image to ECR
        env:
          # Get the registry URI from the previous step
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          SHA_IMAGE_URI="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" 
          LATEST_IMAGE_URI="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest"
          echo $SHA_IMAGE_URI
          docker build -t $SHA_IMAGE_URI -t $LATEST_IMAGE_URI .
          docker push $SHA_IMAGE_URI
          docker push $LATEST_IMAGE_URI

      - name: Verify Docker Image on ECR (Optional)
        run: |
          echo ${{ env.IMAGE_TAG }}
          aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG

  deploy:
    runs-on: ubuntu-22.04
    environment: aws
    needs: build-and-push
    permissions:
      id-token: write # This is absolutely necessary for OIDC!
      contents: read  # Access to check out code and install dependencies
    steps:
      - name: Get EC2 Instance ID
        id: get_ec2_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ env.PROJECT }}-ec2" --query "Reservations[*].Instances[*].InstanceId" --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Deploy Application to EC2
        run: |
          aws ssm send-command \
              --instance-ids ${{ env.INSTANCE_ID }} \
              --document-name "AWS-RunShellScript" \
              --comment "Deploy ${{ env.PROJECT }}" \
              --parameters commands=["cd /home/ubuntu/${{ env.PROJECT }}", "./deploy.sh"] \
              --cloud-watch-output-config "CloudWatchLogGroupName=/aws/ssm/${{ env.PROJECT }}-deploy-logs,CloudWatchOutputEnabled=true" \
              --region "${{ env.AWS_REGION }}"
